using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace Mingxiaoyu.Microsoft.EntityFrameworkCore
{
    public abstract class DbContextBase : DbContext, IDbContext
    {
        public abstract string GetCurrentUser();

        public DbContextBase(DbContextOptions options) : base(options)
        {
        }

        protected DbContextBase() : base()
        {

        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            var assembliesProvider = EFStaticServiceProvider.Instance.GetRequiredService<IAssembliesProvider>();
            var assemblies = assembliesProvider.GetAssemblies();
            EntityAutoMapToDbContext(modelBuilder, assemblies);

            EnsureTracked(this, modelBuilder);

            SoftDeletQueryFilter(modelBuilder);
            base.OnModelCreating(modelBuilder);
        }

        protected virtual void EntityAutoMapToDbContext(ModelBuilder modelBuilder, Assembly[] assemblies)
        {
            var typeConfigurations = assemblies.SelectMany(x => x.DefinedTypes).Where(type =>
                    (type.BaseType?.IsGenericType ?? false) &&
                        (
                            (type.BaseType.GetGenericTypeDefinition() == typeof(EntityTypeConfiguration<>) || type.BaseType.GetGenericTypeDefinition() == typeof(EntityTypeConfiguration<>)) ||
                            (type.BaseType.GetGenericTypeDefinition() == typeof(QueryTypeConfiguration<>) || type.BaseType.GetGenericTypeDefinition() == typeof(QueryTypeConfiguration<>))
                        )
                   );

            foreach (var typeConfiguration in typeConfigurations)
            {
                var configuration = (IMappingConfiguration)Activator.CreateInstance(typeConfiguration);
                configuration.ApplyConfiguration(modelBuilder);
            }
        }

        protected virtual void EnsureTracked(DbContext context, ModelBuilder modelBuilder)
        {
            foreach (var entityType in modelBuilder.Model.GetEntityTypes())
            {
                if (typeof(ITrackedEntity).IsAssignableFrom(entityType.ClrType))
                {
                    modelBuilder.Entity(entityType.ClrType)
                        .Property(Constants.CreatedField)
                        .HasField(Constants.CreatedBackingField);

                    modelBuilder.Entity(entityType.ClrType)
                        .Property(Constants.CreatedUserField)
                        .HasField(Constants.CreatedUserBackingField);

                    modelBuilder.Entity(entityType.ClrType)
                        .Property(Constants.ModifiedField)
                        .HasField(Constants.ModifiedBackingField);

                    modelBuilder.Entity(entityType.ClrType)
                        .Property(Constants.ModifiedUserField)
                        .HasField(Constants.ModifiedUserBackingField);
                }

                if (entityType.ClrType.IsKindOfGeneric(typeof(IEntity<>)) && !typeof(IIgnoreIdAutoAutoGenerate).IsAssignableFrom(entityType.ClrType))
                {
                    //https://docs.microsoft.com/en-us/ef/core/modeling/data-seeding
                    //The primary key value needs to be specified even if it's usually generated by the database. 
                    //It will be used to detect data changes between migrations.
                    //Previously seeded data will be removed if the primary key is changed in any way.
                    modelBuilder.Entity(entityType.ClrType)
                        .Property("Id")
                        .ValueGeneratedOnAdd();
                }
            }
        }

        public virtual int SaveChanges(string who = null)
        {
            this.BeforeSaveChanges(who);

            return base.SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(string who = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            this.BeforeSaveChanges(who);
            return base.SaveChangesAsync(cancellationToken);
        }

        protected virtual void BeforeSaveChanges(string who)
        {
            var uow = EFStaticServiceProvider.Instance.GetRequiredService<IUnitOfWork>();
            var when = DateTimeOffset.UtcNow;

            if (string.IsNullOrEmpty(who)) who = this.GetCurrentUser();

            foreach (var entry in ChangeTracker.Entries())
            {
                var type = entry.Entity.GetType();
                //if (type.BaseType.IsKindOfGeneric(typeof(IEntity<>)) && entry.State == EntityState.Added &&
                //     !(entry.Entity is IIgnoreIdAutoAutoGenerate))
                //{
                //    (entry.Entity as IEntity<>).Id = Guid.NewGuid();
                //}
                //entry.Metadata.FindPrimaryKey()
                if (entry.Entity is ISoftDeletable && entry.State == EntityState.Deleted)
                {
                    (entry.Entity as ISoftDeletable).IsDeleted = true;
                    entry.State = EntityState.Modified;
                }

                if (entry.Entity is ITrackedEntity)
                {
                    var trackedEntity = entry.Entity as ITrackedEntity;

                    if (entry.State == EntityState.Added || entry.State == EntityState.Modified)
                    {
                        entry.CurrentValues[Constants.ModifiedField] = when;
                        entry.CurrentValues[Constants.ModifiedUserField] = who;
                    }
                    if (entry.State == EntityState.Added)
                    {

                        entry.CurrentValues[Constants.CreatedUserField] = who;
                        entry.CurrentValues[Constants.CreatedField] = when;
                    }
                }
            }
        }
        protected virtual void SoftDeletQueryFilter(ModelBuilder modelBuilder)
        {
            foreach (var entityType in modelBuilder.Model.GetEntityTypes())
            {
                if (typeof(ISoftDeletable).IsAssignableFrom(entityType.ClrType) == true)
                {
                    modelBuilder.Entity(entityType.ClrType)
                          .HasQueryFilter(ConvertFilterExpression<ISoftDeletable>(e => !e.IsDeleted, entityType.ClrType));
                }
            }
        }

        private static LambdaExpression ConvertFilterExpression<TInterface>(
                          Expression<Func<TInterface, bool>> filterExpression,
                          Type entityType)
        {
            var newParam = Expression.Parameter(entityType);
            var newBody = ReplacingExpressionVisitor.Replace(filterExpression.Parameters.Single(), newParam, filterExpression.Body);

            return Expression.Lambda(newBody, newParam);
        }
    }
}